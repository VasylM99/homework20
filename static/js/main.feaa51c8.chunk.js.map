{"version":3,"sources":["components/post.js","components/inputs.js","store/actions/posts.actions.js","components/posts.js","App.js","store/reducers/posts.reducers.js","store/reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Post","props","className","src","author","photo","alt","name","nickname","date","aria-hidden","content","image","authors","Inputs","useState","setContent","setImage","setAuthor","dispatch","useDispatch","placeholder","value","onChange","event","target","find","item","map","onClick","type","payload","moment","format","PostProps","posts","useSelector","state","post","App","ANAKIN_IMAGE","RAY_IMAGE","initialState","reducers","combineReducers","action","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.feaa51c8.chunk.js","sourcesContent":["import React  from 'react';\r\nimport './style.css';\r\n\r\n\r\n\r\nfunction Post(props) {   \r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div>\r\n                <img className=\"avatar\" src={props.author.photo} alt='avatar'/>\r\n            </div>\r\n            <div className=\"main\">\r\n                <div className=\"info\">\r\n                    <div className=\"info-acc\">\r\n                        <span className=\"name\">{props.author.name}</span>\r\n                        <span className=\"nickname\">{props.author.nickname}</span>\r\n                        <span className=\"date\">{props.date}</span>\r\n                    </div>\r\n                    <div>\r\n                        <i className=\"fa  fa-chevron-down\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n                    <div className=\"content-text\">{props.content}</div>\r\n                <div className=\"main-content\">\r\n                        <img className=\"image\" src={props.image} alt='content image'/>\r\n                        <div className=\"footer\">\r\n                            <i className=\"fa fa-comment\" aria-hidden=\"true\">\r\n                                <span>482</span>\r\n                            </i>\r\n                            <i className=\"fa fa-retweet\" aria-hidden=\"true\">\r\n                                <span>146</span>\r\n                            </i>\r\n                            <i className=\"fa fa-heart-o \" aria-hidden=\"true\">\r\n                                <span>887</span>\r\n                            </i>\r\n                            <i className=\"fa fa-cloud-upload\" aria-hidden=\"true\"></i>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        </div>            \r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { CREATE_POST } from '../store/actions/posts.actions';\r\nimport moment from 'moment';\r\n\r\nconst authors = [\r\n    {\r\n        name: 'Yoda',\r\n        photo: 'https://www.ednist.info/media/images/32224/raw/7fed94ee34b502eaa8178097620fd535.jpg',\r\n        nickname: '@yoda'\r\n    },\r\n    {\r\n        name: 'Chubakka',\r\n        photo: 'https://gdb.rferl.org/E34AF90C-3403-4055-8E7A-F1F9B6399FD2_cx0_cy10_cw0_w408_r1_s.jpg',\r\n        nickname: '@chubakka'\r\n    },\r\n    {\r\n        name: 'Dart Vader',\r\n        photo: 'https://i.citrus.ua/uploads/content/product-photos/fedenicheva/March/267060.jpg',\r\n        nickname: '@dartvader'\r\n    },\r\n]\r\nfunction Inputs(props) {\r\n    const [content, setContent] = useState('');\r\n    const [image, setImage]= useState('');\r\n    const [author, setAuthor] = useState(authors[0]);\r\n    const dispatch= useDispatch();\r\n\r\n    const handleContentChange = (event)=>{\r\n        setContent(event.target.value)\r\n    }\r\n    const handleImageChange = (event)=>{\r\n        setImage(event.target.value)\r\n    }\r\n\r\n    const handleAuthorChange = (event) => {\r\n        const author = authors.find(item => item.name === event.target.value);\r\n        setAuthor(author);\r\n    }\r\n\r\n    const addPost = () => {\r\n        dispatch({ type: CREATE_POST, payload: {\r\n            author,\r\n            content,\r\n            image,\r\n            date: moment().format('DD MMM.')\r\n        }})\r\n        setContent('')\r\n        setImage('')\r\n    }\r\n    return(\r\n        <div className='inputs'>\r\n            <div>\r\n                <input className='input' placeholder='Content' value={content} onChange={handleContentChange}/>\r\n            </div>\r\n            <div>\r\n                <input className='input' value={image} placeholder='Image' onChange={handleImageChange}/>\r\n            </div>\r\n            <div>\r\n                <select className='input' onChange={handleAuthorChange}           >\r\n                    {authors.map(author => \r\n                        <option \r\n                            value={author.name}\r\n                        >{author.name}</option>) }\r\n                </select>\r\n            </div>\r\n            <button className='button' onClick={addPost}>Add post</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Inputs;","export const CREATE_POST = 'CREATE_POST';","import React from 'react';\r\nimport Post from './post';\r\nimport Inputs from  './inputs';\r\nimport { useSelector } from 'react-redux';\r\n\r\n\r\n\r\nfunction PostProps() {\r\n    const posts = useSelector(state =>state.posts.posts);\r\n    \r\nreturn (\r\n    <div className='layout-wrapper'>\r\n        <Inputs />\r\n        {posts.map(post => \r\n            <Post \r\n                author={post.author}\r\n                content={post.content}\r\n                image={post.image}\r\n                date={post.date}\r\n            />\r\n            \r\n        )}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default PostProps;","import React from 'react';\nimport PostProps from'./components/posts';\n\n\nfunction App() {\n    return (\n    <div className=\"App\">\n      <PostProps />\n    </div>\n  );\n}\n\nexport default App;\n","import * as Actions from '../actions/posts.actions';\r\n\r\n\r\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\r\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\r\nconst initialState = {\r\n  posts: [{\r\n    author: {\r\n      name: \"Anakin Skywalker\",\r\n      photo: ANAKIN_IMAGE,\r\n      nickname: \"@dart_vader\"\r\n    },\r\n    content: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\r\n    image: RAY_IMAGE,\r\n    date: \"26 февр.\"\r\n  },\r\n  {\r\n    author: {\r\n      name: \"Anakin Skywalker\",\r\n      photo: ANAKIN_IMAGE,\r\n      nickname: \"@dart_vader\"\r\n    },\r\n    content: \"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\r\n    image: RAY_IMAGE,\r\n    date: \"26 февр.\"\r\n  }]\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case Actions.CREATE_POST:\r\n      return {...state, posts:[action.payload, ...state.posts]};\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\nimport posts from './posts.reducers';\r\nconst reducers = combineReducers({\r\n    posts\r\n});\r\n\r\nexport default reducers;","import { createStore } from 'redux';\r\nimport reducers from './reducers';\r\nconst store = createStore(reducers);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}